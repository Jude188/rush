"""Interface definition for limiters."""
import datetime

import attr

from .. import limit_data
from .. import quota
from .. import result
from .. import stores


@attr.s
class BaseLimiter:
    """Base object defining the interface for limiters."""

    store: stores.BaseStore = attr.ib(
        validator=attr.validators.instance_of(stores.BaseStore)
    )

    def rate_limit(
        self, key: str, quantity: int, rate: quota.Quota
    ) -> result.RateLimitResult:
        """Apply the rate-limit to a quantity of requests."""
        raise NotImplementedError()

    def reset(self, key: str, rate: quota.Quota) -> result.RateLimitResult:
        """Reset the rate-limit for a given key."""
        raise NotImplementedError()

    @staticmethod
    def result_from_quota(
        rate: quota.Quota,
        limited: bool,
        limitdata: limit_data.LimitData,
        elapsed_since_period_start: datetime.timedelta,
    ) -> result.RateLimitResult:
        """Generate the RateLimitResult for a given set of parameters.

        :param quota:
            The quota being applied by the limiter.
        :type quota:
            :class:`~rush.quota.Quota`
        :param limitdata:
            The data generated by the limiter.
        :type limitdata:
            :class:`~rush.limit_data.LimitData`
        :param datetime.timedelta elapsed_since_period_start:
            The differenece in time between when this latest period started
            and when the quota was applied.
        :returns:
            The rate limit result.
        :rtype:
            :class:`~rush.result.RateLimitResult`
        """
        return result.RateLimitResult(
            limit=rate.count,
            limited=limited,
            remaining=limitdata.remaining,
            reset_after=(rate.period - elapsed_since_period_start),
            retry_after=(rate.period - elapsed_since_period_start),
        )
